$date
	Mon Mar 20 17:37:54 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module processor_tb $end
$var wire 32 ! reg1_data [31:0] $end
$var wire 32 " reg2_data [31:0] $end
$var wire 32 # write_reg_data [31:0] $end
$var wire 5 $ write_reg_addr [4:0] $end
$var wire 5 % reg2_addr [4:0] $end
$var wire 5 & reg1_addr [4:0] $end
$var wire 32 ' prog_count [31:0] $end
$var wire 6 ( instr_opcode [5:0] $end
$var reg 1 ) clk $end
$var reg 1 * rst $end
$var integer 32 + passedTests [31:0] $end
$var integer 32 , totalTests [31:0] $end
$scope module uut $end
$var wire 1 ) clk $end
$var wire 32 - datamuxwritedataout [31:0] $end
$var wire 32 . prog_count [31:0] $end
$var wire 32 / reg1_data [31:0] $end
$var wire 32 0 reg2_data [31:0] $end
$var wire 1 * rst $end
$var wire 1 1 step5muxand $end
$var wire 32 2 write_reg_data [31:0] $end
$var wire 1 3 zero $end
$var wire 32 4 writeregmuxout [31:0] $end
$var wire 5 5 write_reg_addr [4:0] $end
$var wire 32 6 step5muxchan2 [31:0] $end
$var wire 32 7 shiftleft2 [31:0] $end
$var wire 1 8 regwriteregwrite $end
$var wire 1 9 regdstselectin $end
$var wire 32 : regdata2 [31:0] $end
$var wire 32 ; regdata1 [31:0] $end
$var wire 5 < reg2_addr [4:0] $end
$var wire 5 = reg1_addr [4:0] $end
$var wire 32 > pcadderout [31:0] $end
$var wire 32 ? pc_out [31:0] $end
$var wire 32 @ pc_in [31:0] $end
$var wire 1 A memwritedatamem $end
$var wire 1 B memtoregmux $end
$var wire 1 C memreaddatamem $end
$var wire 32 D instruction_out [31:0] $end
$var wire 6 E instr_opcode [5:0] $end
$var wire 1 F instr_extend $end
$var wire 32 G datamemmuxchan2 [31:0] $end
$var wire 1 H branchandmux $end
$var wire 1 I alusrcmux $end
$var wire 32 J aluout [31:0] $end
$var wire 2 K aluopaluctrl [1:0] $end
$var wire 32 L alumuxout [31:0] $end
$var wire 4 M aluctrloutalu [3:0] $end
$scope module ALU $end
$var wire 32 N channel_b_in [31:0] $end
$var wire 32 O channel_a_in [31:0] $end
$var wire 4 P alu_control_in [3:0] $end
$var reg 32 Q alu_result_out [31:0] $end
$var reg 32 R temp [31:0] $end
$var reg 1 3 zero_out $end
$upscope $end
$scope module ALUControl $end
$var wire 6 S instruction_5_0 [5:0] $end
$var wire 2 T alu_op [1:0] $end
$var reg 4 U alu_out [3:0] $end
$upscope $end
$scope module Control $end
$var wire 6 V instr_op [5:0] $end
$var reg 2 W alu_op [1:0] $end
$var reg 1 I alu_src $end
$var reg 1 H branch $end
$var reg 1 C mem_read $end
$var reg 1 B mem_to_reg $end
$var reg 1 A mem_write $end
$var reg 1 9 reg_dst $end
$var reg 1 8 reg_write $end
$upscope $end
$scope module MuxAlu $end
$var wire 32 X datain2 [31:0] $end
$var wire 1 I select_in $end
$var wire 32 Y datain1 [31:0] $end
$var wire 32 Z data_out [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ) clk $end
$var wire 1 * rst $end
$var wire 1 ) write_en $end
$var wire 32 [ data_in [31:0] $end
$var reg 32 \ data_out [31:0] $end
$upscope $end
$scope module RAM $end
$var wire 1 ) clk $end
$var wire 8 ] data_address [7:0] $end
$var wire 1 A data_mem_write $end
$var wire 32 ^ data_read_data [31:0] $end
$var wire 32 _ instr_instruction [31:0] $end
$var wire 8 ` instr_read_address [7:0] $end
$var wire 1 * rst $end
$var wire 32 a data_write_data [31:0] $end
$upscope $end
$scope module Registers $end
$var wire 1 ) clk $end
$var wire 32 b read_data_1 [31:0] $end
$var wire 32 c read_data_2 [31:0] $end
$var wire 5 d read_register_1 [4:0] $end
$var wire 5 e read_register_2 [4:0] $end
$var wire 1 8 reg_write $end
$var wire 1 * rst $end
$var wire 32 f write_data [31:0] $end
$var wire 5 g write_register [4:0] $end
$var integer 32 h i [31:0] $end
$upscope $end
$scope module Step5 $end
$var wire 4 i alu_control_in [3:0] $end
$var wire 32 j channel_b_in [31:0] $end
$var wire 32 k channel_a_in [31:0] $end
$var reg 32 l alu_result_out [31:0] $end
$var reg 32 m temp [31:0] $end
$var reg 1 n zero_out $end
$upscope $end
$scope module WriteRegMux $end
$var wire 32 o datain1 [31:0] $end
$var wire 32 p datain2 [31:0] $end
$var wire 1 9 select_in $end
$var wire 32 q data_out [31:0] $end
$upscope $end
$scope module pc_adder $end
$var wire 4 r alu_control_in [3:0] $end
$var wire 32 s channel_a_in [31:0] $end
$var wire 32 t channel_b_in [31:0] $end
$var reg 32 u alu_result_out [31:0] $end
$var reg 32 v temp [31:0] $end
$var reg 1 w zero_out $end
$upscope $end
$scope module step5mux $end
$var wire 32 x datain1 [31:0] $end
$var wire 32 y datain2 [31:0] $end
$var wire 1 1 select_in $end
$var wire 32 z data_out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100 z
b10000000 y
b100 x
0w
b100 v
b100 u
b100 t
b0 s
b10 r
b10 q
b0 p
b10 o
0n
b10000000 m
b10000000 l
b100 k
b1111100 j
b10 i
bx h
b10 g
bz f
b10 e
b0 d
bx c
bx b
bx a
b0 `
b10001100000000100000000000011111 _
bx ^
bx ]
b0 \
b100 [
b11111 Z
bx Y
b11111 X
b0 W
b100011 V
b10 U
b0 T
b11111 S
bx R
bx Q
b10 P
bx O
b11111 N
b10 M
b11111 L
b0 K
bx J
1I
0H
bx G
1F
b100011 E
b10001100000000100000000000011111 D
1C
1B
0A
b100 @
b0 ?
b100 >
b0 =
b10 <
bx ;
bx :
09
18
b1111100 7
b10000000 6
b0 5
b10 4
x3
bz 2
01
bz 0
bz /
b0 .
bz -
b0 ,
b0 +
1*
0)
b100011 (
b0 '
b0 &
b10 %
b0 $
bz #
bz "
bz !
$end
#50000
b1010110 G
b1010110 ^
b11111 ]
03
b11111 J
b11111 Q
b11111 R
b0 :
b0 Y
b0 a
b0 c
b0 ;
b0 O
b0 b
b100000 h
1)
#100000
0*
0)
#105000
b0 G
b0 ^
b1100 ]
b1100 J
b1100 Q
b1100 R
b101 g
b110000 7
b110000 j
b1100 L
b1100 N
b1100 Z
0F
b101 4
b101 q
18
1I
0B
0C
b1000 @
b1000 [
b1000 z
b111000 6
b111000 l
b111000 y
b111000 m
b1100 X
b1100 S
b101 o
b101 %
b101 <
b101 e
b11 &
b11 =
b11 d
b1000 (
b1000 E
b1000 V
b1000 >
b1000 k
b1000 u
b1000 x
b1000 v
b100000011001010000000000001100 D
b100000011001010000000000001100 _
b100 `
b100 '
b100 .
b100 ?
b100 \
b100 s
b0 :
b0 Y
b0 a
b0 c
1)
#110000
0)
#115000
b110 g
b10001100000000100000000000011111 G
b10001100000000100000000000011111 ^
b0 ]
b1100000010101000 7
b1100000010101000 j
b0 L
b0 N
b0 Z
b111 M
b111 P
b111 U
b110 4
b110 q
13
b0 J
b0 Q
b0 R
b10 K
b10 T
b10 W
19
18
0I
b1100 @
b1100 [
b1100 z
b1100000010110100 6
b1100000010110100 l
b1100000010110100 y
b1100000010110100 m
b11000000101010 X
b101010 S
b110 p
b110 $
b110 5
b100 o
b100 %
b100 <
b100 e
bz ;
bz O
bz b
b101 &
b101 =
b101 d
b0 (
b0 E
b0 V
b1100 >
b1100 k
b1100 u
b1100 x
b1100 v
b101001000011000000101010 D
b101001000011000000101010 _
b1000 `
b1000 '
b1000 .
b1000 ?
b1000 \
b1000 s
b0 :
b0 Y
b0 a
b0 c
1)
#116000
b1 ,
#120000
0)
#125000
b0 g
b0 7
b0 j
b10 M
b10 P
b10 U
b0 4
b0 q
b10000 @
b10000 [
b10000 z
b10000 6
b10000 l
b10000 y
b10000 m
b0 X
b0 S
b0 p
b0 $
b0 5
b0 o
b0 %
b0 <
b0 e
b0 ;
b0 O
b0 b
b0 &
b0 =
b0 d
b10000 >
b10000 k
b10000 u
b10000 x
b10000 v
b0 D
b0 _
b1100 `
b1100 '
b1100 .
b1100 ?
b1100 \
b1100 s
1)
#126000
b10 ,
